Description: >
  This template deploys a VPC, with a pair of public subnets spread 
  across three Availabilty Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. 

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: dev

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.31.0.0/16

  VpcName:
    Description: Please enter the name for this VPC
    Type: String
    Default: MyVPC

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.31.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.31.16.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.31.32.0/24

  DBInstanceClass: 
    Description: Please enter the instance class for the database
    Type: String
    Default: db.t3.micro

  DBPassword: 
    Description: Please enter the password for the database
    Type: String

  PubliclyAccessibleRDS:
    Description: Please enter the public accessible value for RDS
    Type: String
    Default: "false"

  EC2InstanceType:
    Description: Please enter the instance type for EC2
    Type: String
    Default: "t1.micro"

  EC2VolumeSize:
    Description: Please enter the volume size for EC2
    Type: String
    Default: "10"

  EC2VolumeType:
    Description: Please enter the volume type for EC2
    Type: String
    Default: "io1"

  EC2KeyName:
    Description: Please enter the key-pair name for EC2
    Type: String
    Default: "csye6225"

  


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Route Table

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      GroupName: application
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: application


  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ApplicationSecurityGroup
    Properties:
      GroupDescription: Group for RDS
      GroupName: database
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: database

  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: LifeCycleRule
          Prefix: standard
          Status: Enabled
          ExpirationInDays: '60'
          Transitions:
            - TransitionInDays: '30'
              StorageClass: STANDARD_IA 

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: EC2-CSYE6225
      
  IAMPolicy:
    Type: AWS::IAM::Policy
    DependsOn: 
    - S3Bucket
    - EC2Role
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListMultipartUploadParts
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket, '/*']]
      Roles: 
        - !Ref EC2Role

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    DependsOn:
    - PublicSubnet1
    - PublicSubnet2
    Properties: 
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: DBSubnetGroup     

  MySQLDB:
    Type: AWS::RDS::DBInstance
    DependsOn: RDSSecurityGroup
    Properties:
      DBInstanceIdentifier: csye6225-spring2020
      DBName: csye6225
      PubliclyAccessible: !Ref PubliclyAccessibleRDS
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 10
      MultiAZ: false
      Engine: MySQL
      EngineVersion: 5.6
      MasterUsername: dbuser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  EC2RoleAttach:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2Role
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
  
  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
    - PublicSubnet3
    - EC2RoleAttach
    - ApplicationSecurityGroup
    - MySQLDB
    Properties: 
      ImageId: "ami-067b9f0c41ebea56d"
      KeyName: !Ref EC2KeyName
      InstanceType: !Ref EC2InstanceType
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: !Ref EC2VolumeType
          DeleteOnTermination: "true"
          VolumeSize: !Ref EC2VolumeSize
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet3
          GroupSet:
            - !Ref ApplicationSecurityGroup
      IamInstanceProfile: !Ref EC2RoleAttach
